blueprint:
  name: ZHC5010 Button Light Control
  description: Control a light with a selected button on the ZHC5010 using Z-Wave JS.
  domain: automation
  input:
    zhc5010_device:
      name: ZHC5010 Device
      description: Select the ZHC5010 device to use.
      selector:
        device:
          integration: zwave_js
          manufacturer: Logic Group
          model: ZHC5010
    target_light:
      name: Target Light
      description: Select the light to control.
      selector:
        entity:
          domain: light
    button:
      name: ZHC5010 Button
      description: Select which button on the ZHC5010 to use.
      selector:
        select:
          options:
            - Button 1
            - Button 2
            - Button 3
            - Button 4
    hold_brightness:
      name: Hold Brightness
      description: Brightness level to toggle between 100% and this level when the button is held.
      default: 50
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
          mode: slider

mode: single
max_exceeded: silent
trigger:
  - platform: event
    event_type: zwave_js_value_notification
    event_data:
      device_id: !input zhc5010_device

variables:
  button_id: '{{ trigger.event.data.property_key_name }}'
  button_action: '{{ trigger.event.data.value }}'
  selected_button: !input button
  hold_brightness: !input hold_brightness

condition:
  # Ensure the event matches the selected button.
  - condition: template
    value_template: >
      {{ (selected_button == 'Button 1' and button_id == '001') or
         (selected_button == 'Button 2' and button_id == '002') or
         (selected_button == 'Button 3' and button_id == '003') or
         (selected_button == 'Button 4' and button_id == '004') }}

action:
  - choose:
      # Single button press toggles light brightness between 100% and 0%
      - conditions:
          - condition: template
            value_template: "{{ button_action == 'KeyPressed' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: state
                    entity_id: !input target_light
                    state: "on"
                sequence:
                  - service: light.turn_off
                    data:
                      entity_id: !input target_light
              - conditions:
                  - condition: state
                    entity_id: !input target_light
                    state: "off"
                sequence:
                  - service: light.turn_on
                    data:
                      entity_id: !input target_light
                      brightness_pct: 100

      # Button hold toggles light between hold_brightness and 100%
      - conditions:
          - condition: template
            value_template: "{{ button_action == 'KeyHeldDown' }}"
        sequence:
          - choose:
              # Check if the light is on and if it is at the 'hold_brightness' level
              - conditions:
                  - condition: template
                    value_template: >
                      {{ state_attr('!input target_light', 'brightness') == (hold_brightness * 255 / 100) }}
                sequence:
                  - service: light.turn_on
                    data:
                      entity_id: !input target_light
                      brightness_pct: 100
              - conditions:
                  # If the light is at 100%, set it back to 'hold_brightness'
                  - condition: state
                    entity_id: !input target_light
                    state: "on"
                    attributes:
                      brightness: 255
                sequence:
                  - service: light.turn_on
                    data:
                      entity_id: !input target_light
                      brightness_pct: "{{ hold_brightness }}"

