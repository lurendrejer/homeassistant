blueprint:
  name: ZHC5010 Button Light Control
  description: Control a light with a selected button on the ZHC5010 using Z-Wave JS.
  domain: automation
  input:
    zhc5010_device:
      name: ZHC5010 Device
      description: Select the ZHC5010 device to use.
      selector:
        device:
          integration: zwave_js
          manufacturer: Logic Group
          model: ZHC5010
    target_light:
      name: Target Light
      description: Select the light to control.
      selector:
        entity:
          domain: light
    button:
      name: ZHC5010 Button
      description: Select which button on the ZHC5010 to use.
      selector:
        select:
          options:
            - Button 1
            - Button 2
            - Button 3
            - Button 4
    hold_brightness:
      name: Hold Brightness
      description: Brightness level to set when the button is held.
      default: 50
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
          mode: slider

mode: single
max_exceeded: silent
trigger:
  # Trigger on Central Scene events from the ZHC5010
  - platform: event
    event_type: zwave_js_event
    event_data:
      device_id: !input zhc5010_device
      command_class_name: Central Scene

variables:
  button_id: '{{ trigger.event.data.property_key_name }}'
  button_action: '{{ trigger.event.data.value }}'
  selected_button: !input button

condition:
  # Ensure the event matches the selected button.
  - condition: template
    value_template: >
      {{ (selected_button == 'Button 1' and button_id == '001') or
         (selected_button == 'Button 2' and button_id == '002') or
         (selected_button == 'Button 3' and button_id == '003') or
         (selected_button == 'Button 4' and button_id == '004') }}

action:
  - choose:
      # Single button press toggles light
      - conditions:
          - condition: template
            value_template: "{{ button_action == 'KeyPressed' }}"
        sequence:
          - service: light.toggle
            data_template:
              entity_id: !input target_light
              brightness_pct: >
                {% if is_state(target_light, 'on') %}
                  0
                {% else %}
                  100
                {% endif %}
      # Button hold sets light to specified brightness
      - conditions:
          - condition: template
            value_template: "{{ button_action == 'KeyHeldDown' }}"
        sequence:
          - service: light.turn_on
            data:
              entity_id: !input target_light
              brightness_pct: !input hold_brightness
